# -*- coding: utf-8 -*-
"""model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JoxKmvMAp2WFWJYgWk9cgjZF-kt_UB12
"""

from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix as cm
from sklearn.metrics import classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

#evaluation of model
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report

import numpy as np
import pandas as pd
#import matplotlib.pyplot as plt

# categorical labels 
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing

import pickle

#from google.colab import files
#uploaded = files.upload()

import io
df = pd.read_csv('C:/Users/Bhumika Bhatia/Desktop/Flare detector/finalmodeldata2.csv')
#df.head()

#categorical labels to numeric values 
le = LabelEncoder()
#df['Flair'] = le.fit_transform(df['Flair'])
le = pickle.load(open('LabelEn.pkl','rb'))
#print(le.classes__)
#logistic regression
X = df["Title"]+df["Comments"]+df['CleanedURL']+df["Body"]
Y = df["Flair"]
X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.2,random_state=0)
logreg = Pipeline([('vect', CountVectorizer(stop_words='english')),
                ('tfidf', TfidfTransformer()),
            ('clf', LogisticRegression(penalty='l2')),
            ])
logreg.fit(X_train, y_train)

pickle.dump(logreg, open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))

#def predict(input):
    # x = [0:'AskIndia',1:'Business/Finance',2:'Food','Non-Political','Photography','Policy/Economy','Politics',
    # 'Scheduled','Science/Technology','Sports']
    # labels = [{0: }]
    # output = model.predict(input)
    # print(output)
    # #print(le.classes__)
    # x = list(le.inverse_transform(output[0:1]))
    # return x
    #return 2

#print(list(le.inverse_transform(model.predict([X_test[966]]))))



